CREATE TABLE IF NOT EXISTS users (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  login VARCHAR NOT NULL,
  email VARCHAR NOT NULL,
  name VARCHAR NOT NULL,
  birthday DATE
);

CREATE TABLE IF NOT EXISTS films (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR NOT NULL,
  description VARCHAR NOT NULL,
  releaseDate DATE NOT NULL,
  duration INTEGER NOT NULL,
  rating_id INTEGER REFERENCES rating(id)
);

CREATE TABLE IF NOT EXISTS genres (
  genre_id INTEGER PRIMARY KEY,
  name VARCHAR NOT NULL
);

CREATE TABLE IF NOT EXISTS films_genres (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  film_id INTEGER REFERENCES films(id) ON DELETE CASCADE,
  genre_id INTEGER REFERENCES genres(genre_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS film_likes (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
  film_id INTEGER REFERENCES films(id) ON DELETE CASCADE,
  CONSTRAINT unique_like UNIQUE(user_id, film_id)
);

CREATE TABLE IF NOT EXISTS favorite_films (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
  film_id INTEGER REFERENCES films(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS friendship (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
  friend_id INTEGER REFERENCES users(id) ON DELETE CASCADE
);

ALTER TABLE friendship
ADD CONSTRAINT IF NOT EXISTS unique_friendship_pair UNIQUE (user_id, friend_id);

CREATE TABLE IF NOT EXISTS rating (
  id INTEGER PRIMARY KEY,
  name VARCHAR NOT NULL
);

CREATE TABLE IF NOT EXISTS user_feeds (
  event_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
  event_type VARCHAR(20) NOT NULL,
  operation VARCHAR(20) NOT NULL,
  entity_id INTEGER NOT NULL,
  timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT valid_event_type CHECK (event_type IN ('LIKE', 'REVIEW', 'FRIEND')),
  CONSTRAINT valid_operation CHECK (operation IN ('ADD', 'REMOVE', 'UPDATE'))
);