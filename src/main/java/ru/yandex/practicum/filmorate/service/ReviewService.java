package ru.yandex.practicum.filmorate.service;

import java.util.List;

import org.springframework.stereotype.Service;

import jakarta.validation.ValidationException;
import lombok.RequiredArgsConstructor;
import ru.yandex.practicum.filmorate.exceptions.ConditionsNotMetException;
import ru.yandex.practicum.filmorate.exceptions.NotFoundException;
import ru.yandex.practicum.filmorate.model.Review;
import ru.yandex.practicum.filmorate.model.enums.FeedEventOperation;
import ru.yandex.practicum.filmorate.storage.ReviewStorage;

@Service
@RequiredArgsConstructor
public class ReviewService {
	private final ReviewStorage reviewStorage;
	private final UserService userService;
	private final FilmService filmService;
	private final FeedService feedService;

	private void validateReviewExists(Long reviewId) {
		if (!reviewStorage.existsById(reviewId)) {
			throw new NotFoundException("Review with id " + reviewId + " not found");
		}
	}

	private void validateUserAndFilm(Long userId, Long filmId) {
		userService.getUser(userId);
		filmService.getFilmById(filmId);
	}

	public Review create(Review review) {
		if (review.getReviewId() != null) {
			throw new IllegalArgumentException("Review ID must be generated by database");
		}

		validateUserAndFilm(review.getUserId(), review.getFilmId());
		Review createdReview = reviewStorage.create(review);

		feedService.addReviewEvent(createdReview.getUserId(), createdReview.getReviewId(), FeedEventOperation.ADD);
		return createdReview;
	}

	public Review update(Review review) {
		validateReviewExists(review.getReviewId());
		validateUserAndFilm(review.getUserId(), review.getFilmId());


		Review updatedReview = reviewStorage.update(review);
		feedService.addReviewEvent(updatedReview.getUserId(), updatedReview.getReviewId(), FeedEventOperation.UPDATE);

		return updatedReview;
	}

	public void delete(Long id) {
		Review review = getById(id);

		// Удаляем все оценки отзыва сначала
		reviewStorage.removeAllRatingsForReview(id);

		// Затем удаляем сам отзыв
		reviewStorage.delete(id);

		// Добавляем событие удаления
		feedService.addReviewEvent(review.getUserId(), review.getReviewId(), FeedEventOperation.REMOVE);
	}

	public Review getById(Long id) {
		return reviewStorage.getById(id)
				.orElseThrow(() -> new NotFoundException("Review with id " + id + " not found"));
	}

	public List<Review> getByFilmId(Long filmId, int count) {

		if (count <= 0) {
			throw new ValidationException("Count parameter must be positive");
		}
		if (filmId != null) {
			filmService.getFilmById(filmId);
		}
		return reviewStorage.getByFilmId(filmId, count);
	}

	public void addLike(Long reviewId, Long userId) {
		validateReviewExists(reviewId);
		userService.getUser(userId);

		if (reviewStorage.hasUserDislike(reviewId, userId)) {
			throw new ConditionsNotMetException("User already disliked this review");
		}

		reviewStorage.addLike(reviewId, userId);
	}

	public void addDislike(Long reviewId, Long userId) {
		validateReviewExists(reviewId);
		userService.getUser(userId);

		if (reviewStorage.hasUserLike(reviewId, userId)) {
			throw new ConditionsNotMetException("User already liked this review");
		}
		reviewStorage.addDislike(reviewId, userId);
	}

	public void removeLike(Long reviewId, Long userId) {
		validateReviewExists(reviewId);
		userService.getUser(userId);
	}

	public void removeDislike(Long reviewId, Long userId) {
		validateReviewExists(reviewId);
		userService.getUser(userId);
	}
}