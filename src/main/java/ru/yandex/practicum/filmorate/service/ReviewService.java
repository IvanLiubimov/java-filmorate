package ru.yandex.practicum.filmorate.service;

import jakarta.validation.ValidationException;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import ru.yandex.practicum.filmorate.exceptions.NotFoundException;
import ru.yandex.practicum.filmorate.exceptions.ConditionsNotMetException;
import ru.yandex.practicum.filmorate.model.Review;
import ru.yandex.practicum.filmorate.model.enums.FeedEventOperation;
import ru.yandex.practicum.filmorate.storage.ReviewStorage;

import java.util.List;

@Service
@RequiredArgsConstructor
public class ReviewService {
    private final ReviewStorage reviewStorage;
    private final UserService userService;
    private final FilmService filmService;
    private final FeedService feedService;

    private void validateReviewExists(Long reviewId) {
        if (!reviewStorage.existsById(reviewId)) {
            throw new NotFoundException("Review with id " + reviewId + " not found");
        }
    }

    private void validateUserAndFilm(Long userId, Long filmId) {
        userService.getUser(userId);
        filmService.getFilmById(filmId);
    }

    public Review create(Review review) {
        if (review.getReviewId() != null) {
            throw new IllegalArgumentException("Review ID must be generated by database");
        }
        if (review.getContent() == null || review.getContent().trim().isEmpty()) {
            throw new ValidationException("Review content cannot be empty");
        }
        if (review.getIsPositive() == null) {
            throw new ValidationException("isPositive field is required");
        }
        if (review.getUserId() == null || review.getFilmId() == null) {
            throw new ValidationException("User ID and Film ID are required");
        }

        validateUserAndFilm(review.getUserId(), review.getFilmId());
        Review createdReview = reviewStorage.create(review);

        feedService.addReviewEvent(createdReview.getUserId(),
                createdReview.getReviewId(),
                FeedEventOperation.ADD);
        return createdReview;
    }

    public Review update(Review review) {
        validateReviewExists(review.getReviewId());
        validateUserAndFilm(review.getUserId(), review.getFilmId());

        if (review.getContent() == null || review.getContent().trim().isEmpty()) {
            throw new ValidationException("Review content cannot be empty");
        }
        if (review.getIsPositive() == null) {
            throw new ValidationException("isPositive field is required");
        }

        Review updatedReview = reviewStorage.update(review);
       feedService.addReviewEvent(updatedReview.getUserId(),
                updatedReview.getReviewId(),
                FeedEventOperation.UPDATE);
        return updatedReview;
    }

    public void delete(Long id) {
        Review review = getById(id);

        // Удаляем все оценки отзыва сначала
        reviewStorage.removeAllRatingsForReview(id);

        // Затем удаляем сам отзыв
        reviewStorage.delete(id);

        // Добавляем событие удаления
        feedService.addReviewEvent(review.getUserId(),
                review.getReviewId(),
                FeedEventOperation.REMOVE);

    }


    public Review getById(Long id) {
        validateReviewExists(id);
        return reviewStorage.getById(id);
    }



    public List<Review> getByFilmId(Long filmId, int count) {
        if (filmId != null) {
            filmService.getFilmById(filmId);
        }
        return reviewStorage.getByFilmId(filmId, count);
    }

    public void addLike(Long reviewId, Long userId) {
        validateReviewExists(reviewId);
        userService.getUser(userId);

        if (reviewStorage.hasUserDislike(reviewId, userId)) {
            throw new ConditionsNotMetException("User already disliked this review");
        }

        reviewStorage.addLike(reviewId, userId);
        feedService.addReviewLikeEvent(userId, reviewId, FeedEventOperation.ADD);
    }


    public void addDislike(Long reviewId, Long userId) {
        validateReviewExists(reviewId);
        userService.getUser(userId);

        if (reviewStorage.hasUserLike(reviewId, userId)) {
            throw new ConditionsNotMetException("User already liked this review");
        }

        reviewStorage.addDislike(reviewId, userId);
        feedService.addReviewLikeEvent(userId, reviewId, FeedEventOperation.REMOVE);
    }

    public void removeLike(Long reviewId, Long userId) {
        validateReviewExists(reviewId);
        userService.getUser(userId);

        boolean hadLike = reviewStorage.hasUserLike(reviewId, userId);
        reviewStorage.removeLike(reviewId, userId);

        if (hadLike) {
            feedService.addReviewLikeEvent(userId, reviewId, FeedEventOperation.REMOVE);
        }
    }

    public void removeDislike(Long reviewId, Long userId) {
        validateReviewExists(reviewId);
        userService.getUser(userId);

        boolean hadDislike = reviewStorage.hasUserDislike(reviewId, userId);
        reviewStorage.removeDislike(reviewId, userId);

        if (hadDislike) {
            feedService.addReviewLikeEvent(userId, reviewId, FeedEventOperation.ADD);
        }
    }
}